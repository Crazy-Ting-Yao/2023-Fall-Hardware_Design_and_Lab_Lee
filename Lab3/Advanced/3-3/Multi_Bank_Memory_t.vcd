$date
	Wed Nov  1 18:07:45 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Multi_Bank_Memory_t $end
$var wire 8 ! dout [7:0] $end
$var reg 1 " clk $end
$var reg 8 # din [7:0] $end
$var reg 11 $ raddr [10:0] $end
$var reg 1 % ren $end
$var reg 11 & waddr [10:0] $end
$var reg 1 ' wen $end
$scope module UUT $end
$var wire 1 " clk $end
$var wire 8 ( din [7:0] $end
$var wire 11 ) raddr [10:0] $end
$var wire 1 % ren $end
$var wire 11 * waddr [10:0] $end
$var wire 1 ' wen $end
$var reg 8 + dout [7:0] $end
$scope module B0 $end
$var wire 1 " clk $end
$var wire 8 , din [7:0] $end
$var wire 9 - raddr [8:0] $end
$var wire 1 . ren $end
$var wire 9 / waddr [8:0] $end
$var wire 1 0 wen $end
$var reg 8 1 dout [7:0] $end
$scope module M0 $end
$var wire 7 2 addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 3 din [7:0] $end
$var wire 1 4 ren $end
$var wire 1 5 wen $end
$var reg 8 6 dout [7:0] $end
$upscope $end
$scope module M1 $end
$var wire 7 7 addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 8 din [7:0] $end
$var wire 1 9 ren $end
$var wire 1 : wen $end
$var reg 8 ; dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 7 < addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 = din [7:0] $end
$var wire 1 > ren $end
$var wire 1 ? wen $end
$var reg 8 @ dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 7 A addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 B din [7:0] $end
$var wire 1 C ren $end
$var wire 1 D wen $end
$var reg 8 E dout [7:0] $end
$upscope $end
$upscope $end
$scope module B1 $end
$var wire 1 " clk $end
$var wire 8 F din [7:0] $end
$var wire 9 G raddr [8:0] $end
$var wire 1 H ren $end
$var wire 9 I waddr [8:0] $end
$var wire 1 J wen $end
$var reg 8 K dout [7:0] $end
$scope module M0 $end
$var wire 7 L addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 M din [7:0] $end
$var wire 1 N ren $end
$var wire 1 O wen $end
$var reg 8 P dout [7:0] $end
$upscope $end
$scope module M1 $end
$var wire 7 Q addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 R din [7:0] $end
$var wire 1 S ren $end
$var wire 1 T wen $end
$var reg 8 U dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 7 V addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 W din [7:0] $end
$var wire 1 X ren $end
$var wire 1 Y wen $end
$var reg 8 Z dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 7 [ addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 \ din [7:0] $end
$var wire 1 ] ren $end
$var wire 1 ^ wen $end
$var reg 8 _ dout [7:0] $end
$upscope $end
$upscope $end
$scope module B2 $end
$var wire 1 " clk $end
$var wire 8 ` din [7:0] $end
$var wire 9 a raddr [8:0] $end
$var wire 1 b ren $end
$var wire 9 c waddr [8:0] $end
$var wire 1 d wen $end
$var reg 8 e dout [7:0] $end
$scope module M0 $end
$var wire 7 f addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 g din [7:0] $end
$var wire 1 h ren $end
$var wire 1 i wen $end
$var reg 8 j dout [7:0] $end
$upscope $end
$scope module M1 $end
$var wire 7 k addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 l din [7:0] $end
$var wire 1 m ren $end
$var wire 1 n wen $end
$var reg 8 o dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 7 p addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 q din [7:0] $end
$var wire 1 r ren $end
$var wire 1 s wen $end
$var reg 8 t dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 7 u addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 v din [7:0] $end
$var wire 1 w ren $end
$var wire 1 x wen $end
$var reg 8 y dout [7:0] $end
$upscope $end
$upscope $end
$scope module B3 $end
$var wire 1 " clk $end
$var wire 8 z din [7:0] $end
$var wire 9 { raddr [8:0] $end
$var wire 1 | ren $end
$var wire 9 } waddr [8:0] $end
$var wire 1 ~ wen $end
$var reg 8 !" dout [7:0] $end
$scope module M0 $end
$var wire 7 "" addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 #" din [7:0] $end
$var wire 1 $" ren $end
$var wire 1 %" wen $end
$var reg 8 &" dout [7:0] $end
$upscope $end
$scope module M1 $end
$var wire 7 '" addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 (" din [7:0] $end
$var wire 1 )" ren $end
$var wire 1 *" wen $end
$var reg 8 +" dout [7:0] $end
$upscope $end
$scope module M2 $end
$var wire 7 ," addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 -" din [7:0] $end
$var wire 1 ." ren $end
$var wire 1 /" wen $end
$var reg 8 0" dout [7:0] $end
$upscope $end
$scope module M3 $end
$var wire 7 1" addr [6:0] $end
$var wire 1 " clk $end
$var wire 8 2" din [7:0] $end
$var wire 1 3" ren $end
$var wire 1 4" wen $end
$var reg 8 5" dout [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 5"
x4"
x3"
bx 2"
bx 1"
bx 0"
x/"
x."
bx -"
bx ,"
bx +"
x*"
x)"
bx ("
bx '"
bx &"
x%"
x$"
bx #"
bx ""
bx !"
x~
bx }
x|
bx {
bx z
bx y
xx
xw
bx v
bx u
bx t
xs
xr
bx q
bx p
bx o
xn
xm
bx l
bx k
bx j
xi
xh
bx g
bx f
bx e
xd
bx c
xb
bx a
bx `
bx _
x^
x]
bx \
bx [
bx Z
xY
xX
bx W
bx V
bx U
xT
xS
bx R
bx Q
bx P
xO
xN
bx M
bx L
bx K
xJ
bx I
xH
bx G
bx F
bx E
xD
xC
bx B
bx A
bx @
x?
x>
bx =
bx <
bx ;
x:
x9
bx 8
bx 7
bx 6
x5
x4
bx 3
bx 2
bx 1
x0
bx /
x.
bx -
bx ,
bx +
bx *
bx )
bx (
x'
bx &
x%
bx $
bx #
0"
bx !
$end
#5000
b0 1
b0 K
b0 e
b0 !"
b0 6
b0 ;
b0 @
b0 E
b0 P
b0 U
b0 Z
b0 _
b0 j
b0 o
b0 t
b0 y
b0 &"
b0 +"
b0 0"
b0 5"
b0 !
b0 +
1"
#10000
b1010111 2
15
0:
0?
0D
0O
0T
0Y
0^
0i
0n
0s
0x
0%"
0*"
0/"
04"
04
09
0>
0C
0N
0S
0X
0]
0h
0m
0r
0w
0$"
0)"
0."
03"
10
0J
0d
0~
0.
0H
0b
0|
b1010111 /
b1010111 I
b1010111 c
b1010111 }
1'
0%
b1010111 #
b1010111 (
b1010111 ,
b1010111 3
b1010111 8
b1010111 =
b1010111 B
b1010111 F
b1010111 M
b1010111 R
b1010111 W
b1010111 \
b1010111 `
b1010111 g
b1010111 l
b1010111 q
b1010111 v
b1010111 z
b1010111 #"
b1010111 ("
b1010111 -"
b1010111 2"
b1010111 &
b1010111 *
0"
#15000
1"
#20000
05
00
0'
0"
#25000
1"
#30000
14
1.
b1010111 -
b1010111 G
b1010111 a
b1010111 {
1%
b1010111 $
b1010111 )
0"
#35000
b1010111 !
b1010111 +
b1010111 1
b1010111 6
1"
#40000
b1111 Q
1T
1J
b10001111 /
b10001111 I
b10001111 c
b10001111 }
1'
b1010101 #
b1010101 (
b1010101 ,
b1010101 3
b1010101 8
b1010101 =
b1010101 B
b1010101 F
b1010101 M
b1010101 R
b1010101 W
b1010101 \
b1010101 `
b1010101 g
b1010101 l
b1010101 q
b1010101 v
b1010101 z
b1010101 #"
b1010101 ("
b1010101 -"
b1010101 2"
b1010001111 &
b1010001111 *
0"
#45000
1"
#50000
b1111 7
b1111 Q
04
1S
0.
1H
b10001111 -
b10001111 G
b10001111 a
b10001111 {
b10011001 /
b10011001 I
b10011001 c
b10011001 }
b1100100 #
b1100100 (
b1100100 ,
b1100100 3
b1100100 8
b1100100 =
b1100100 B
b1100100 F
b1100100 M
b1100100 R
b1100100 W
b1100100 \
b1100100 `
b1100100 g
b1100100 l
b1100100 q
b1100100 v
b1100100 z
b1100100 #"
b1100100 ("
b1100100 -"
b1100100 2"
b1010001111 $
b1010001111 )
b1010011001 &
b1010011001 *
0"
#55000
b1010101 K
b0 1
b1010101 U
b0 6
b1010101 !
b1010101 +
1"
#60000
b1111111 p
b1111111 V
b11001 Q
0T
1s
0J
1d
b10011001 -
b10011001 G
b10011001 a
b10011001 {
b101111111 /
b101111111 I
b101111111 c
b101111111 }
b1001101 #
b1001101 (
b1001101 ,
b1001101 3
b1001101 8
b1001101 =
b1001101 B
b1001101 F
b1001101 M
b1001101 R
b1001101 W
b1001101 \
b1001101 `
b1001101 g
b1001101 l
b1001101 q
b1001101 v
b1001101 z
b1001101 #"
b1001101 ("
b1001101 -"
b1001101 2"
b1010011001 $
b1010011001 )
b10101111111 &
b10101111111 *
0"
#65000
bx !
bx +
bx K
bx U
1"
#70000
b1111111 ,"
0S
1."
0s
0H
1|
0d
b101111111 -
b101111111 G
b101111111 a
b101111111 {
0'
b11101111111 $
b11101111111 )
0"
#75000
bx !"
b0 K
bx 0"
b0 U
bx !
bx +
1"
#80000
0."
0|
0%
0"
#85000
b0 !"
b0 0"
b0 !
b0 +
1"
#90000
0"
